<apex:component >
	<div id="assingProfessorCtrl" ng-controller="assingProfessorCtrl">
			<br/>
			<div class="panel panel-default ieu-panel">
				<div class="panel-heading">
					<div class="row">
	                    <div class="col-sm-9">
	                        <h3 class="panel-title">Asignar a periodo</h3>
	                    </div>
	                    <div class="col-sm-3 text-right" ng-if="base.periods.selected && base.periods.selected.groups">
	                        <label class="label label-primary" ng-bind="base.periods.selected.groups.length + ' grupo(s)'"></label>
	                    </div>
	                </div>
				</div>
				<form name="formEditDG">
					<div class="panel-body">
						<div ng-if="base.loading" class="alert alert-success" role="alert">
							<i class="fa fa-spinner fa-pulse fa-2x fa-fw"></i>
							<span ng-bind="base.messages.loading"/>
						</div>
						<div ng-if="!base.loading && base.groups.instances.length <= 0" class="alert alert-success" role="alert">
							<span class="fa-stack fa-lg">
							    <i class="fa fa-circle fa-stack-2x"></i>
							    <i class="fa fa-users fa-stack-1x fa-inverse"></i>
							</span>
							<span ng-bind="base.messages.nodata"/>
						</div>
						<div class="form-horizontal" ng-if="!base.loading && base.groups.instances.length > 0">
							<div class="row">
								<div class="col-sm-3">
									<div class="form-group">
										<label class="control-label col-sm-4">Periodo</label>
										<div class="col-sm-8">
											<select class="form-control" ng-options="opt as opt.Name for opt in base.periods.instances" ng-model="base.periods.selected">
									        </select>
										</div>
									</div>
								</div>
								<div class="col-sm-2 text-right">
									<div class="input-group">
								        <span class="input-group-addon">Buscar</span>
								        <input type="text" class="form-control" ng-model="base.groups.pag.sea" autofocus="true" />
								    </div>
								</div>
								<div class="col-sm-3 form-horizontal">
									<div class="form-group">
										<label class="control-label col-sm-8">Elementos por p√°gina</label>
										<div class="col-sm-4">
											<select class="form-control" ng-options="opt as opt for opt in base.groups.pag.psi" ng-model="base.groups.pag.ipp">
								                    <option value="" selected="true">-- Ninguno --</option>
							                </select>
										</div>
									</div>
								</div>
								<div class="col-sm-2">
									<div class="checkbox">
									    <label>
									      	<input type="checkbox" ng-model="base.groups.showHistory"/> Mostrar asignados
									    </label>
									  </div>
								</div>
								<div class="col-sm-2 text-center" ng-if="base.groups.filtered.length > 0">
									<button ng-disabled="base.groups.saving" class="btn btn-success" ng-click="saveChanges()">
										<span class="fa fa-save fa-fw" />
					        			<span class="fa fa-spinner fa-pulse" ng-if="base.groups.saving"></span>
										Guardar cambios
									</button>
								</div>
							</div>
							<div class="row" >
	                            <div class="col-sm-6 col-sm-offset-6 text-right" ng-if="base.errors.length>0">
	                                <div class="alert alert-danger alert-dismissible fade in">
	                                	<button type="button" class="close" data-dismiss="alert" aria-label="Close">
										    <span aria-hidden="true">&times;</span>
										</button>
	                                    <ul class="list-unstyled">
	                                         <li ng-repeat="err in base.errors"><span ng-bind="err"/></li>
	                                    </ul>
	                                  </div>
	                                </div>
	                                <div class="col-sm-6 col-sm-offset-6 text-right" ng-if="base.success.length>0">
	                                 	<div class="alert alert-success alert-dismissible fade in">
		                                	<button type="button" class="close" data-dismiss="alert" aria-label="Close">
											    <span aria-hidden="true">&times;</span>
											</button>
	                                        <ul class="list-unstyled">
	                                            <li ng-repeat="msg in base.success"><span ng-bind="msg"/></li>
	                                        </ul>
	                                  </div>
	                            </div>
	                        </div>
							<div class="row">
								<div class="col-sm-12">
									<div class="table-responsive">
										<table class="table table-bordered">
											<thead>
												<tr><th colspan="5" class="text-center">Oferta educativa</th><th colspan="8" class="text-center">Grupo</th></tr>
												<tr>
													<th> 
														<a ng-click="setFieldSort('Periodo__c')" class="ctc-btn"> 
															<span ng-class="iconSort('Periodo__c')"/>
															<span ng-bind="base.obj.Grupo__c.k.Periodo__c.label"/>
														</a>
													</th>
													<th> 
														<a ng-click="setFieldSort('Modalidad__c')" class="ctc-btn"> 
															<span ng-class="iconSort('Modalidad__c')"/>
															<span ng-bind="base.obj.OfertaEducativa__c.k.Modalidad__c.label"/>
														</a>
													</th>
													<th> 
														<a ng-click="setFieldSort('Plantel__c')" class="ctc-btn"> 
															<span ng-class="iconSort('Plantel__c')"/>
															<span ng-bind="base.obj.OfertaEducativa__c.k.Plantel__c.label"/>
														</a>
													</th>
													<th> 
														<a ng-click="setFieldSort('Nivel__c')" class="ctc-btn"> 
															<span ng-class="iconSort('Nivel__c')"/>
															<span ng-bind="base.obj.OfertaEducativa__c.k.Nivel__c.label"/>
														</a>
													</th>
													<th> 
														<a ng-click="setFieldSort('Programa__c')" class="ctc-btn"> 
															<span ng-class="iconSort('Programa__c')"/>
															<span ng-bind="base.obj.OfertaEducativa__c.k.Programa__c.label"/>
														</a>
													</th>


													<th> 
														<a ng-click="setFieldSort('Name')" class="ctc-btn"> 
															<span ng-class="iconSort('Name')"/>
															<span ng-bind="base.obj.Grupo__c.k.Name.label"/>
														</a>
													</th>
													<th> 
														<a ng-click="setFieldSort('Cupo__c')" class="ctc-btn"> 
															<span ng-class="iconSort('Cupo__c')"/>
															<span ng-bind="base.obj.Grupo__c.k.Cupo__c.label"/>
														</a>
													</th>
													<th> 
														<a ng-click="setFieldSort('Inscritos__c')" class="ctc-btn"> 
															<span ng-class="iconSort('Inscritos__c')"/>
															<span ng-bind="base.obj.Grupo__c.k.Inscritos__c.label"/>
														</a>
													</th>
													<th> 
														<a ng-click="setFieldSort('Validados__c')" class="ctc-btn"> 
															<span ng-class="iconSort('Validados__c')"/>
															<span ng-bind="base.obj.Grupo__c.k.Validados__c.label"/>
														</a>
													</th>
													<th ng-bind="base.obj.Grupo__c.k.Docente__c.label"></th>
													<th ng-bind="base.obj.Grupo__c.k.Materia__c.label"></th>
												</tr>
											</thead>
											<tbody>
												<tr ng-repeat="gp in base.groups.filtered|orderBy:base.groups.pag.sfi:base.groups.pag.rev|filter:base.groups.pag.sea|startFrom:(base.groups.pag.cpa - 1) * base.groups.pag.ipp|limitTo: base.groups.pag.ipp">
													<td ng-bind="base.periods.selected.Name"></td>
													<td ng-bind="gp.Modalidad__c"></td>
													<td ng-bind="gp.Plantel__c"></td>
													<td ng-bind="gp.Nivel__c"></td>
													<td ng-bind="gp.Programa__c"></td>
													<td ng-bind="gp.Name"></td>
													<td ng-bind="gp.Cupo__c"></td>
													<td ng-bind="gp.Validados__c"></td>
													<td ng-bind="gp.Inscritos__c"></td>
													<td>
														<ctc-auto-complete 
															ctc-instance="gp"
															ctc-term="gp.Docente__c__t"
															ctc-field="base.obj.Grupo__c.k.Docente__c"
															ctc-form="formEditDG"
															ctc-fields="['Name']"
															></ctc-auto-complete>
													</td>
													<td>
														<ctc-auto-complete 
															ctc-instance="gp"
															ctc-term="gp.Materia__c__t"
															ctc-field="base.obj.Grupo__c.k.Materia__c"
															ctc-form="formEditDG"
															ctc-fields="['Name']"
															></ctc-auto-complete>
													</td>
												</tr>
											</tbody>
										</table>
									</div>
									<uib-pagination 
										ng-if="base.groups.filtered.length > base.groups.pag.ipp"
										items-per-page="base.groups.pag.ipp" 
										total-items="base.groups.pag.tit" 
										ng-model="base.groups.pag.cpa" 
										max-size="base.groups.pag.mpa" 
										boundary-links="true" 
										force-ellipses="true" 
										first-text="{{base.groups.pag.fir}}" 
										previous-text="{{base.groups.pag.pre}}" 
										next-text="{{base.groups.pag.next}}" 
										last-text="{{base.groups.pag.last}}"
										>
									</uib-pagination>
								</div>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
		<script type="text/javascript">
			var app = angular.module('appIEU');
			app.controller('assingProfessorCtrl', ['$scope', '$interval', '$filter', 'sfUtils', 'ctcUtils', 'filterFilter', function($scope, $interval, $filter, sfUtils, ctcUtils, filterFilter) {
				//console.log('\n\n in assingProfessorCtrl ... ');
				$scope.base = {
					describe: ['Grupo__c', 'OfertaEducativa__c'],
					obj: {},
					groups: {
						instances: [],
						get: 'SELECT Id, Name, Estatus__c, Docente__c, Docente__r.Name, Materia__c, Materia__r.Name, Activo__c, AulaAsignada__c, Turno__c, HoraEntrada__c, HoraSalida__c, Dia__c, FechaApertura__c, FechaInicioClases__c, CondicionanteGrupo__c, Cupo__c, Sede__c, Periodicidad__c, Inscritos__c, Validados__c, OfertaEducativa__r.Id, OfertaEducativa__r.GrupoConfigurado__c, OfertaEducativa__r.PagoConfigurado__c, OfertaEducativa__r.Modalidad__r.Name, OfertaEducativa__r.Plantel__r.Id, OfertaEducativa__r.Plantel__r.Name, OfertaEducativa__r.Nivel__r.Name, OfertaEducativa__r.Programa__r.Id, OfertaEducativa__r.Programa__r.Name, OfertaEducativa__r.Periodo__c, Periodo__c, OfertaEducativa__r.Periodo__r.Id, (SELECT Id, OfertaEducativa__c, Grupo__c, Account.Name, Account.PersonEmail FROM Oportunidades__r), (SELECT Id, Name, Email, OfertaEducativa__c, GrupoAsignado__c FROM GrupoAsingado__r) FROM Grupo__c WHERE Estatus__c =\'Planeado\' AND OfertaEducativa__r.GrupoConfigurado__c=true AND OfertaEducativa__r.PagoConfigurado__c=true',
						pag: { //pagination
							ipp: 10,  //items per page
			            	mpa: 5, //max pages
			            	tit: 0,  //total items
			            	cpa: 1, //current page
			            	tpa: 0, //total pages
			            	fir: 'Primero', // first
			            	pre: 'Ant', // previous
			            	next: 'Sig',
			            	last: '√öltimo',
			            	psi : [5, 10, 15, 20, 25, 50, 100], //page sizes
			            	sfi: 'EstatusBeca__c', //sort field
			            	rev: false, //reverse
			            	sea: ''//search
						},
						saving: false,
						showHistory: false
					},
					periods: {
						instances: [],
						get: 'SELECT Id, Name FROM Periodo__c WHERE Activo__c=\'Planeado\'',
						selected: {},
					},
					loading: true,
					messages: {
						loading: 'Cargando...',
						nodata: 'No hay grupos para asignar catedr√°tico y primer materia'
					},
					error: [],
					success:[],
					Timer: null,
					close: true,
					delay: 300,
					delayClose: 8000
				};
				//describe the objectes defined in $scope.base.describe
				$scope.describeObjects = function(objs) {

					if(objs && objs !== null) {
						ctcUtils.describe(objs, function(err, result) {
		                    if(err) {
		                        $scope.errors = err;
		                    } else {
		                    	//console.log('\n\n in result describe...');
		                    	//console.log(result);
		                        angular.forEach($scope.base.describe, function(v, k) {
		                            if(result.hasOwnProperty(v))  {
		                            	$scope.base.obj[v] = {};
		                            	$scope.base.obj[v].a = [];
		                                $scope.base.obj[v].a = result[v];
		                                $scope.base.obj[v].k = {};
		                                angular.forEach(result[v], function(f, i) {
		                                    $scope.base.obj[v].k[f.name] = f;
		                                });
		                            }
		                        });
		                        $scope.listInstancesGroup();
		                    }
		                });
						/*
		            	var a = objs.length;
		            	var b = 0;
		            	angular.forEach(objs, function(o, i) {
		            		$scope.base.obj[o] = {a: [], k: {}};
		            		sfUtils.describe(o, function(res) {
								b++;
		            			if(res.faultcode) { delete $scope.base.obj[o]; return console.error(res); }
								$scope.base.obj[o].a = res;
								angular.forEach($scope.base.obj[o].a, function(f, j){$scope.base.obj[o].k[f.name] = f; });
							});
		            	});
		            	$scope.Timer = $interval(function () {
		                    if(b === a) {
		                        $interval.cancel($scope.Timer);
		                        $scope.listInstancesGroup();
		                        $scope.base.obj.Grupo__c.k. Estatus__c.required = true;
		                        sfUtils.obj = {
		                        	Grupo__c: {
		                        		k: $scope.base.obj.Grupo__c.k,
		                        		a: $scope.base.obj.Grupo__c.a
		                        	}
		                        }
		                    }
		                }, $scope.base.delay);
		                */
		        	}
		        };

		        $scope.describeObjects($scope.base.describe);
		        $scope.listInstancesGroup = function(period) {	
		        	if($scope.base && $scope.base.groups && $scope.base.groups.get && $scope.base.groups.get.length > 0) {
		        		ctcUtils.retrieve($scope.base.groups.get, function(err, res) {
		        		//sfUtils.retrieve($scope.base.groups.get, function(res) {
		        			//console.log('\n\n response listInstancesGroup...');
		        			//console.log(res);

		        			if(err) {
		        				$scope.errors = err;
		        			} else {
			        			$scope.base.groups.instances = res || [];
			        			if(!angular.isArray($scope.base.groups.instances)) {
			        				$scope.base.groups.instances = [];
			        			} else {
				        			var periods = {};
				        			angular.forEach($scope.base.groups.instances, function(v, key) {
				        				if(!periods[v.OfertaEducativa__r.Periodo__c]) {
				        					periods[v.OfertaEducativa__r.Periodo__c] = {Id: v.OfertaEducativa__r.Periodo__c, Name: v.Periodo__c, groups: []};
				        				}
				        				if(v.Estatus__c && v.Estatus__c.length > 0) {
					            			var Estatus__c = sfUtils.findElement('value', v.Estatus__c, $scope.base.obj.Grupo__c.k.Estatus__c.values);
					            			if(Estatus__c && Estatus__c.value) {
					            				v.Estatus__c__o = Estatus__c;
					            			}
					            		}
					            		if(v.Turno__c && v.Turno__c.length > 0) {
					            			var Turno__c = sfUtils.findElement('value', v.Turno__c, $scope.base.obj.Grupo__c.k.Turno__c.values);
					            			if(Turno__c && Turno__c.value) {
					            				v.Turno__c__o = Turno__c;
					            			}
					            		}
					            		if(v.HoraEntrada__c && v.HoraEntrada__c.length > 0) {
					            			var HoraEntrada__c = sfUtils.findElement('value', v.HoraEntrada__c, $scope.base.obj.Grupo__c.k.HoraEntrada__c.values);
					            			if(HoraEntrada__c && HoraEntrada__c.value) {
					            				v.HoraEntrada__c__o = HoraEntrada__c;
					            			}
					            		}
					            		if(v.HoraSalida__c && v.HoraSalida__c.length > 0) {
					            			var HoraSalida__c = sfUtils.findElement('value', v.HoraSalida__c, $scope.base.obj.Grupo__c.k.HoraSalida__c.values);
					            			if(HoraSalida__c && HoraSalida__c.value) {
					            				v.HoraSalida__c__o = HoraSalida__c;
					            			}
					            		}



					            		/*
					            		if(v.FechaApertura__c && v.FechaApertura__c != null && v.FechaApertura__c.indexOf('-')) {
											var str = v.FechaApertura__c.substring(v.FechaApertura__c.lastIndexOf('-') + 1, v.FechaApertura__c.length);
											v.FechaApertura__c = sfUtils.parseDate(new Date(v.FechaApertura__c.substring(0, v.FechaApertura__c.lastIndexOf('-') + 1) + (parseInt(str) + 1)));
										}
										if(v.FechaInicioClases__c && v.FechaInicioClases__c != null && v.FechaInicioClases__c.indexOf('-')) {
											var str = v.FechaInicioClases__c.substring(v.FechaInicioClases__c.lastIndexOf('-') + 1, v.FechaInicioClases__c.length);
											v.FechaInicioClases__c = sfUtils.parseDate(new Date(v.FechaInicioClases__c.substring(0, v.FechaInicioClases__c.lastIndexOf('-') + 1) + (parseInt(str) + 1)));
										}*/

										if(v.GrupoAsingado__r && v.GrupoAsingado__r != null) {
											if(v.GrupoAsingado__r.size === '1') {
												var temp = angular.copy(v.GrupoAsingado__r.records);
												v.GrupoAsingado__r = [];
												v.GrupoAsingado__r.push(temp);
											} else {
												v.GrupoAsingado__r = angular.copy(v.GrupoAsingado__r.records);
											}
										}
										if(v.Oportunidades__r && v.Oportunidades__r != null) {
											if(v.Oportunidades__r.size === '1') {
												var temp = angular.copy(v.Oportunidades__r.records);
												v.Oportunidades__r = [];
												v.Oportunidades__r.push(temp);
											} else {
												v.Oportunidades__r = angular.copy(v.Oportunidades__r.records);
											}
										}



				        				periods[v.OfertaEducativa__r.Periodo__c].groups.push({
				        					Id: v.Id, 
				        					Name: v.Name, 
				        					Estatus__c: v.Estatus__c,
				        					Estatus__c__o: v.Estatus__c__o,
				        					AulaAsignada__c: v.AulaAsignada__c,
				        					Turno__c: v.Turno__c,
				        					Turno__c__o : v.Turno__c__o,
				        					HoraEntrada__c: v.HoraEntrada__c,
				        					HoraEntrada__c__o: v.HoraEntrada__c__o,
				        					HoraSalida__c: v.HoraSalida__c,
				        					HoraSalida__c__o: v.HoraSalida__c__o,
				        					Dia__c: v.Dia__c,
				        					FechaApertura__c: v.FechaApertura__c,
				        					FechaInicioClases__c: v.FechaInicioClases__c,
				        					CondicionanteGrupo__c: parseInt(v.CondicionanteGrupo__c),
				        					Sede__c: v.Sede__c,
				        					Periodicidad__c: v.Periodicidad__c,
				        					Activo__c: v.Activo__c,
				        					Cupo__c: v.Cupo__c != null ? parseInt(v.Cupo__c) : '',
				        					Inscritos__c: v.Inscritos__c != null ? parseInt(v.Inscritos__c) : '',
				        					Validados__c: v.Inscritos__c != null ? parseInt(v.Inscritos__c): '',
				        					OfertaEducativa__c: v.OfertaEducativa__r.Id, 
				        					Modalidad__c: v.OfertaEducativa__r.Modalidad__r.Name,
				        					Plantel__c: v.OfertaEducativa__r.Plantel__r.Name,
				        					Plantel__c__i: v.OfertaEducativa__r.Plantel__r.Id,
				        					Nivel__c: v.OfertaEducativa__r.Nivel__r.Name,
				        					Programa__c: v.OfertaEducativa__r.Programa__r.Name,
				        					Programa__c__i: v.OfertaEducativa__r.Programa__r.Id,
				        					GrupoAsingado__r : v.GrupoAsingado__r || [],
				        					Oportunidades__r: v.Oportunidades__r || [],
				        					Docente__c: v.Docente__c,
				        					Docente__c__t: v.Docente__r != null ? v.Docente__r.Name : '',
				        					Materia__c: v.Materia__c,
				        					Materia__c__t: v.Materia__r != null ? v.Materia__r.Name : ''
				        				});

				        			});
				        			angular.forEach(Object.keys(periods), function(p, key){
				        				$scope.base.periods.instances.push(periods[p]);
				        			});
				        			$scope.base.periods.selected = $scope.base.periods.instances[0];
								}
		        			}
		        			$scope.base.loading = false;
		        			$scope.$apply();
		        		});
		    		}
		        };
		        $scope.$watch('[base.groups.pag.sea, base.periods.selected, base.groups.pag.ipp, base.groups.showHistory]', function (value) {
			    	$scope.paginationGroups($scope.base.groups.pag.sea);
			    }, true);
			    $scope.paginationGroups = function(value) {
	            	if($scope.base.periods && $scope.base.periods.selected && $scope.base.periods.selected && $scope.base.periods.selected.groups && $scope.base.periods.selected.groups.length > 0) {

	            		/*
	            		if($scope.base.groups.showHistory) {
	            			var temp = [];
		            		temp = filterFilter($scope.base.periods.selected.groups, value);
		            		var add = [];
	            			angular.forEach(temp, function(v, k) {
	            				if(v.Docente__c && v.Docente__c.length > 0 && v.Materia__c && v.Materia__c.length > 0) {
	            					add.push(v);
	            				}
	            			});
	            			$scope.base.groups.filtered = add;

	            		} else {
		            		$scope.base.groups.filtered = filterFilter($scope.base.periods.selected.groups, value);
		            		var temp = [];
		            		temp = filterFilter($scope.base.periods.selected.groups, value);
		            		var add = [];
	            			angular.forEach(temp, function(v, k) {
	            				
	            				if(!v.hasOwnProperty('Docente__c') || v.Docente__c == undefined || v.Materia__c == undefined ||!v.hasOwnProperty('Materia__c')) {
	            					add.push(v);
	            				}
	            			});
	            		}*/
	            		var add = [];
	            		angular.forEach($scope.base.periods.selected.groups, function(v, k) {
	            			if($scope.base.groups.showHistory && v.Docente__c && v.Docente__c.length > 0 && v.Materia__c && v.Materia__c.length > 0) {
	            				add.push(v);
	            			} else if(!$scope.base.groups.showHistory && (!v.hasOwnProperty('Docente__c') || v.Docente__c == undefined || v.Materia__c == undefined ||!v.hasOwnProperty('Materia__c'))) {
	            				add.push(v);
	            			}
	            		});

	            		$scope.base.groups.filtered = filterFilter(add, value);
	            		//$scope.base.groups.filtered = filterFilter($scope.base.periods.selected.groups, value);


		            	$scope.base.groups.pag.tit = $scope.base.groups.filtered.length;
		            	$scope.base.groups.pag.tpa = Math.ceil($scope.base.groups.pag.tit / $scope.base.groups.pag.ipp);
		            	if($scope.base.groups.pag.cpa > $scope.base.groups.pag.tpa) {
		            		$scope.base.groups.pag.cpa = 1;
		            	}
	            	}
	            };
	            $scope.saveChanges = function() {
	            	$scope.base.groups.saving = true;
	            	$scope.base.errors = [];
	            	$scope.base.success = [];
	            	if($scope.base.periods.selected && $scope.base.periods.selected.groups && $scope.base.periods.selected.groups.length > 0) {
	            		var payload = [];
	            		//angular.forEach($scope.base.periods.selected.groups, function(g, key) {
	            		angular.forEach($scope.base.groups.filtered, function(g, key) {
	            			//var obj = new sforce.SObject('Grupo__c');
	            			var obj = {};
	            			obj.Id = g.Id;
	            			if(g.hasOwnProperty('Docente__c__o')) {
	            				obj.Docente__c = g.Docente__c__o != null && g.Docente__c__o.hasOwnProperty('Id') ? g.Docente__c__o.Id : null;
	            			}
	            			if(g.hasOwnProperty('Materia__c__o')) {
	            				obj.Materia__c = g.Materia__c__o != null && g.Materia__c__o.hasOwnProperty('Id') ? g.Materia__c__o.Id : null;
	            			}
                            obj.Activo__c = obj.Docente__c != null && obj.Materia__c != null ? 'Activo' : 'Planeado';
	            			payload.push(obj);
	            		});

	            		ctcUtils.upsert('Grupo__c', payload, function(err, res) {
			                //console.log('\n\n response upsert...');
			                //console.log(err);
			                //console.log(res);
	            			$scope.base.groups.saving = false;
			                if(err) {
	            				$scope.base.errors.push("Ocurri√≥ un error al procesar su petici√≥n, ");
			                } else {
	            				$scope.base.success.push("Grupos actualizados correctamente");
			                }
			                $scope.base.Timer = $interval(function () {
	                            if($scope.base.close) {
		            				$scope.base.errors = [];
		            				$scope.base.success = [];
		            			}
	                            $interval.cancel($scope.base.Timer);
	                        }, $scope.base.delayClose);
		        			$scope.$apply();
			              });

	            		//console.log('to save: ');
	            		//console.log(payload);
	            		/*
	            		sfUtils.upsert(payload, function(res) {
	            			//console.log('\n\n response saveChanges...');
		        			//console.log(res);
	            			$scope.base.groups.saving = false;
	            			if(res.faultcode) {
	            				$scope.base.errors.push("Ocurri√≥ un error al procesar su petici√≥n, " + (res.faultstring ? res.faultstring : ''));
	            			} else {
	            				$scope.base.success.push("Grupos actualizados correctamente");
	            			}
	                        $scope.base.Timer = $interval(function () {
	                            if($scope.base.close) {
		            				$scope.base.errors = [];
		            				$scope.base.success = [];
		            			}
	                            $interval.cancel($scope.base.Timer);
	                        }, $scope.base.delayClose);
		        			$scope.$apply();
	            		});*/
	            	}
	            };
	            $scope.setFieldSort = function(sortField) {
		                $scope.base.groups.pag.sfi = sortField;
		                $scope.base.groups.pag.rev = !$scope.base.groups.pag.rev;
		            }
	            var isSortedBy = function (fieldName) {return $scope.base.groups.pag.sfi === fieldName; }; 
	            var isSortedAscending = function (fieldName) {return isSortedBy(fieldName) && !$scope.base.groups.pag.rev; }; 
	            var isSortedDescending = function (fieldName) {return isSortedBy(fieldName) && $scope.base.groups.pag.rev; }; 
	            $scope.iconSort = function (fieldName) {return {'fa fa-sort': !isSortedBy(fieldName), 'fa fa-sort-amount-asc fa-fw': isSortedAscending(fieldName), 'fa fa-sort-amount-desc fa-fw': isSortedDescending(fieldName)}; }; 
			}]);

			app.directive('ctcAutoComplete', function($filter, $interval, ctcUtils) {
	            return {
	                restrict: 'EA',
	                replace: true,
	                scope: {
	                    instance: '=ctcInstance',
	                    term: '=ctcTerm',
	                    field: '=ctcField',
	                    form: '=ctcForm',
	                    fields: '=ctcFields'
	                },
	                template: '<div class="sf-autocomplete-holder"><input ng-keypress="verifyKey($event)" ng-disabled="disabled" ng-class="validateClass(form, field.name)" ng-change="findTerm()" ng-blur="hideResults()" ng-model="term" class="form-control"><select ng-model="instance[field.name + \'__o\']" name="{{field.name}" ng-hide="true" ng-required="field.required"/><span class="fa fa-search sf-autocomplete-search"/><div class="sf-autocomplete-dropdown" ng-if="showDropdown"><div ng-if="searching" class="sf-autocomplete-row"><span ng-bind="labelSearching"/></div><div class="sf-autocomplete-row" ng-repeat="result in results" ng-class="{\'sf-autocomplete-selected-row\': $index == currentIndex}" ng-click="setSelected($index)"><span ng-repeat="field in fields" ng-bind="result[field]"/></div></div>',
	                link: function ($scope, elem, attrs) {
	                    $scope.searching = false;
	                    $scope.labelSearching = $scope.search || 'Buscando...';
	                    $scope.currentIndex = 0;
	                    $scope.showDropdown = false;
	                    $scope.Timer = null;

	                    $scope.setSelected = function(index) {
	                    	$scope.instance[$scope.field.name + '__o'] = $scope.results[index];
	                    	$scope.term = $scope.instance[$scope.field.name + '__o'].Name;
	                    };


	                    

			            $scope.verifyKey = function($event) {
			            	if($event.keyCode === 13) {
			            		$event.preventDefault();
	                        	$event.stopPropagation();
			            	}
			            };
			            $scope.validateClass = function(form, fieldName) {
							if(form && fieldName && form[fieldName]) {
								return form[fieldName].$valid ? 'ctc-has-success' : 'ctc-has-error';
							}
						};

	                    $scope.updateFilter = function(registered, form) {
					        //console.log('\n\nin updateFilter...' + new Date());
					        //console.log(registered);
					        //console.log($scope.instance);
	                        if(registered && form) {
	                        	//console.log('in updateFilter ' + new Date());
	                            angular.forEach(registered, function(instance, index) {
	                                angular.forEach(fields, function(field, idx) {
	                                	//console.log(form[field+$scope.instanceParent.Id]);
	                                    if(form[field+instance.Id]) {
	                                        form[field+instance.Id].$$parseAndValidate();
	                                    }
	                                });
	                            });
	                        }
	                    }
	                    $scope.findTerm = function() {
	                        $scope.searching = true;
	                        $scope.showDropdown = true;
	                        $scope.results = [];
	                        $scope.instance[$scope.field.name + '__o'] = null;
	                        $scope.base = {
	                        	Docente__c: {
	                        		//get: 'SELECT Id, Name FROM Docente__c WHERE Name LIKE \'%'+$scope.term+'%\' OR ApMaterno__c LIKE \'%'+$scope.term+'%\' OR ApPaterno__c LIKE \'%'+$scope.term+'%\' LIMIT 25'
	                        		get: 'SELECT Id, Name FROM Docente__c WHERE Name LIKE \'%'+$scope.term+'%\' LIMIT 20'
		                        },
		                        Materia__c : {
		                        	get: 'SELECT Id, Name FROM Materia__c WHERE Name LIKE \'%'+$scope.term+'%\' AND Programa__c=\''+$scope.instance.Programa__c__i+'\' AND Plantel__c=\''+$scope.instance.Plantel__c__i+'\' LIMIT 20'
		                        }
		                    };	

                    		//console.log('\n\n in findTerm ...');
                    		//console.log($scope);

	                        //FUNCIONAL
	                        $scope.query = $scope.base[$scope.field.name].get;
	                        if($scope.query && $scope.query.length > 2) {
	                        	//sfUtils.retrieve($scope.query, function(res) {
	                        	ctcUtils.retrieve($scope.query, function(err, res) {
	                        		//console.log('result findTerm ...');
	                        		//console.log(res);
	                        		$scope.results = res;
	                        		if($scope.results.length > 0) {
	                        			$scope.showDropdown = true;
	                        		}
	                        		$scope.$apply();
	                        		//console.log($scope);
	                        	});
	                        }

	                        $scope.currentIndex = 0;
	                        $scope.searching = false;
	                        if($scope.results && $scope.results.length < 1) {
	                            $scope.showDropdown = false;
	                        }
	                    };
	                    $scope.hideResults = function() {
	                        $scope.Timer = $interval(function () {
	                            $scope.showDropdown = false;
	                            $interval.cancel($scope.Timer);
	                        }, 200);
	                    };

	                    elem.on("keyup", function (event) {
	                        event.preventDefault()
	                        event.stopPropagation()
	                        var strLength = $scope.term ? $scope.term.length : 0;
	                        if($scope.results && $scope.results.length>0) {
	                            if(event.which === 40) { 
	                                if(!$scope.showDropdown && $scope.results.length>0) {
	                                    $scope.showDropdown = true;
	                                } else {
	                                    if (($scope.currentIndex + 1) < $scope.results.length) {
	                                        $scope.currentIndex ++;
	                                    } else {
	                                        $scope.currentIndex = 0;
	                                    } 
	                                }
	                            } else if(event.which === 38) {
	                                if ($scope.currentIndex >= 1) {
	                                    $scope.currentIndex --;
	                                } else {
	                                    $scope.currentIndex = ($scope.results.length - 1);
	                                }
	                                event.target.setSelectionRange(strLength, strLength);
	                            } else if(event.which === 13) {
	                                $scope.setSelected($scope.currentIndex);
	                                $scope.showDropdown = false;
	                            } else if(event.which === 27) {
	                                $scope.showDropdown = false;
	                            } else {
	                            	$scope.showDropdown = false;
	                            }
	                        } else if(event.which === 38) {
	                            event.target.setSelectionRange(strLength, strLength);
	                        }
	                        $scope.$apply();
	                    });
	                }
	            }
	        });
			app.filter('startFrom', function () {
			    return function (input, start) {
			        if (input) {
			            start = +start;
			            return input.slice(start);
			        }
			        return [];
			    };
			});

			app.factory('ctcUtils', function($filter, $interval) {
              	var delay = 300;

	            var describeObject = function(objects, callback) {
	              OFE_OfertaEducativaCtrl.describe(objects, function(result, event) {
	                  if(result) {
	                     var metadata = {};
	                      angular.forEach(result, function(v, i) {
	                          var fields = [];
	                          angular.forEach(v.fields, function(field, index) {
	                              var isRequired = (field.createable && !field.nillable && !field.defaultedOnCreate) || !field.custom;
	                              var mdField = {name: field.name, label: field.label, type: field.type, length: field.length, required: isRequired};
	                              if(field.type === 'picklist' || field.type === 'multipicklist' || field.type === 'reference') {
	                                if(field.picklistValues && field.picklistValues.length > 0) {
	                                      var values = [];
	                                      angular.forEach(field.picklistValues, function(it) {
	                                          values.push({label: it.label, value: it.value});
	                                      });
	                                      mdField.values = values;
	                                }
	                                  mdField.referenceTo = field.referenceTo
	                              } else if(field.type === 'double' || field.type === 'percent') {
	                                mdField.precision = field.precision;
	                                mdField.scale = field.scale;
	                              }
	                              if(field.hasOwnProperty('inlineHelpText')) {
	                                mdField.helpText = field.inlineHelpText;
	                              }
	                              fields.push(mdField);
	                          });
	                          metadata[v.name] = fields;
	                      });
	                      callback(null, metadata);
	                  } else {
	                      callback([event.message], null);
	                  }
	              });

	            };
	            var retrieveObject = function(query, callback) {
	              OFE_OfertaEducativaCtrl.query(query, function(result, event) {
	                  if(result) {
	                      callback(null, result);
	                  } else {
	                      callback([event.message], null);
	                  }
	              });
	            };
	            var upsertObjects = function(objType, upserts, callback) {
	                OFE_OfertaEducativaCtrl.upsertObjects(objType, JSON.stringify(upserts), function(result, event) {
	                    if(result) {
	                        callback(null, result);
	                    } else {
	                        callback([event.message], null);
	                    }
	                });
	            };
	            var deleteObjects = function(ids, callback) {
	              /*sforce.connection.deleteIds(ids, {
	                onSuccess: function(res) {
	                  callback(res);
	                },
	                onFailure: function(res) {
	                  callback(res);
	                }
	              });*/
	            };
	            var parseDate =  function(date) {
	                return $filter('date')(date, 'dd/MM/yyyy');
	            };
	            var findElementInArray = function(field, value, datasource) {
	                var ret = {};
	                if(field && value && datasource) {
	                    var res = $filter('filter')(datasource, {[field]: value}, true);
	                    if(res && res.length > 0) {
	                        ret = res[0];
	                    }
	                }
	                return ret;
	            };
	            var fieldIsValid = function(fieldName, form) {
	                if(!fieldName || !form) {
	                    return '';
	                } else {
	                    return form[fieldName].$valid ? 'has-success' : 'has-error';
	                }
	            };
	            var createDate = function(strDate) {
	                var date = null;
	                strDate = strDate || '';
	                strDate = strDate.split('/');
	                if(strDate.length > 2) {
	                    date = new Date();
	                    date.setDate(strDate[0]);
	                    date.setMonth(strDate[1]  - 1);
	                    date.setFullYear(strDate[2]);
	                }
	                return date;
	            };
	            return {
	              describe: describeObject,
	              retrieve: retrieveObject,
	              upsert: upsertObjects,
	              delete: deleteObjects,
	              parseDate: parseDate,
	              findElement: findElementInArray,
	              fieldIsValid: fieldIsValid,
	              createDate: createDate
	            }
          	});
		</script>
	</apex:component>